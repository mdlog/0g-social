// install (contoh nama paket; sesuaikan dengan SDK 0G TS yang kamu pakai)
// npm i @0glabs/0g-ts-sdk ethers multer express

import express from 'express';
import multer from 'multer';
import { ethers } from 'ethers';
// ↓ SESUAIKAN dengan SDK yang kamu gunakan
import { Indexer, ZgFile, getFlowContract } from '@0glabs/0g-ts-sdk';

const app = express();
const upload = multer({ storage: multer.memoryStorage() });

const INDEXER_RPC = process.env.INDEXER_RPC!;
const EVM_RPC = process.env.EVM_RPC!;
const PK = process.env.STORAGE_PK!;

const provider = new ethers.JsonRpcProvider(EVM_RPC);
const signer = new ethers.Wallet(PK, provider);
const indexer = new Indexer(INDEXER_RPC);

app.post('/api/posts', upload.single('file'), async (req, res) => {
  try {
    const { text } = req.body;
    const buf = req.file?.buffer;                     // file dari FE (multipart field "file")
    if (!buf) return res.status(400).json({ error: 'file missing' });

    // 1) bungkus file
    const zgFile = await ZgFile.fromBuffer(buf, req.file!.originalname, req.file!.mimetype);

    // 2) dapatkan flow contract (untuk commit & bayar gas)
    const flow = await getFlowContract(provider, signer);

    // 3) upload via indexer → dapat tx & cid/root
    const { txHash, root /* CID */ } = await indexer.uploadFile(flow, zgFile, { replicas: 1 });

    await zgFile.close();

    // 4) susun metadata post (ringan)
    const metadata = {
      v: 1,
      type: 'post',
      text,
      asset: { kind: 'image', cid: root, mime: req.file!.mimetype, size: buf.length },
      kv: { indexer: INDEXER_RPC },
      createdAt: Math.floor(Date.now() / 1000),
    };

    // (Opsional) 5) commit metadata ke 0G DA → simpan (root,epoch,qid)
    // ...panggil service internal kamu yang bicara gRPC ke Disperser...

    // 6) simpan pointer ke DB app kamu (pseudo)
    // await db.insertPost({ cid: root, metadata, daPointer })

    res.json({ ok: true, cid: root, txHash, metadata });
  } catch (e:any) {
    console.error(e);
    res.status(500).json({ error: e.message || 'upload failed' });
  }
});

app.get('/api/files/:cid', async (req, res) => {
  // cara download via indexer (proxy) — simple:
  const url = `${INDEXER_RPC}/file/${encodeURIComponent(req.params.cid)}`;
  res.redirect(url);
});

app.listen(3000, () => console.log('API up on :3000'));
