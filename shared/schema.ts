import { sql } from "drizzle-orm";
import { pgTable, text, varchar, timestamp, boolean, integer } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  displayName: text("display_name").notNull(),
  email: text("email"),
  bio: text("bio"),
  avatar: text("avatar"),
  walletAddress: text("wallet_address"),
  isVerified: boolean("is_verified").default(false).notNull(),
  followingCount: integer("following_count").default(0).notNull(),
  followersCount: integer("followers_count").default(0).notNull(),
  postsCount: integer("posts_count").default(0).notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const posts = pgTable("posts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  authorId: varchar("author_id").notNull().references(() => users.id),
  content: text("content").notNull(),
  imageUrl: text("image_url"),
  mediaType: text("media_type"), // 'image' | 'video' | null
  mediaStorageHash: text("media_storage_hash"), // 0G Storage hash for media files
  storageHash: text("storage_hash"), // 0G Storage content hash for decentralized storage
  transactionHash: text("transaction_hash"), // 0G Chain transaction hash
  likesCount: integer("likes_count").default(0).notNull(),
  commentsCount: integer("comments_count").default(0).notNull(),
  sharesCount: integer("shares_count").default(0).notNull(),
  isAiRecommended: boolean("is_ai_recommended").default(false).notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const follows = pgTable("follows", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  followerId: varchar("follower_id").notNull().references(() => users.id),
  followingId: varchar("following_id").notNull().references(() => users.id),
  createdAt: timestamp("created_at").defaultNow(),
});

export const likes = pgTable("likes", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id),
  postId: varchar("post_id").notNull().references(() => posts.id),
  createdAt: timestamp("created_at").defaultNow(),
});

export const comments = pgTable("comments", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  postId: varchar("post_id").notNull().references(() => posts.id),
  authorId: varchar("author_id").notNull().references(() => users.id),
  content: text("content").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const reposts = pgTable("reposts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  userId: varchar("user_id").notNull().references(() => users.id),
  postId: varchar("post_id").notNull().references(() => posts.id),
  createdAt: timestamp("created_at").defaultNow(),
});

// Session table for connect-pg-simple
export const sessions = pgTable("session", {
  sid: varchar("sid").primaryKey(),
  sess: text("sess").notNull(),
  expire: timestamp("expire").notNull(),
});

// Insert schemas  
export const insertUserSchema = createInsertSchema(users).omit({
  id: true,
  createdAt: true,
});

// Profile update schema (for editing profile data)
export const updateUserProfileSchema = createInsertSchema(users).omit({
  id: true,
  createdAt: true,
  walletAddress: true, // Cannot change wallet address
  followingCount: true,
  followersCount: true,
  postsCount: true,
}).partial(); // All fields optional for updates

export const insertPostSchema = createInsertSchema(posts).omit({
  id: true,
  createdAt: true,
  likesCount: true,
  commentsCount: true,
  sharesCount: true,
  authorId: true, // Set server-side from session
  storageHash: true, // Auto-generated by 0G Storage
  transactionHash: true, // Auto-generated by 0G Chain
  mediaStorageHash: true // Auto-generated by 0G Storage for media
}).extend({
  // Web3 signature fields (optional for backward compatibility)
  signature: z.string().optional(),
  message: z.string().optional(),
  timestamp: z.number().optional(),
  address: z.string().optional(),
  // Media upload fields
  mediaURL: z.string().optional(),
  mediaName: z.string().optional()
});

export const insertFollowSchema = createInsertSchema(follows).omit({
  id: true,
  createdAt: true,
});

export const insertLikeSchema = createInsertSchema(likes).omit({
  id: true,
  createdAt: true,
});

export const insertCommentSchema = createInsertSchema(comments).omit({
  id: true,
  createdAt: true,
});

export const insertRepostSchema = createInsertSchema(reposts).omit({
  id: true,
  createdAt: true,
  userId: true,
});

// Types
export type User = typeof users.$inferSelect;
export type Post = typeof posts.$inferSelect;
export type Follow = typeof follows.$inferSelect;
export type Like = typeof likes.$inferSelect;
export type Comment = typeof comments.$inferSelect;
export type Repost = typeof reposts.$inferSelect;

export type InsertUser = z.infer<typeof insertUserSchema>;
export type UpdateUserProfile = z.infer<typeof updateUserProfileSchema>;

export type InsertPost = z.infer<typeof insertPostSchema>;
export type InsertFollow = z.infer<typeof insertFollowSchema>;
export type InsertLike = z.infer<typeof insertLikeSchema>;
export type InsertComment = z.infer<typeof insertCommentSchema>;
export type InsertRepost = z.infer<typeof insertRepostSchema>;

// Extended types for API responses
export type PostWithAuthor = Post & {
  author: User;
  isLiked: boolean;
  isReposted: boolean;
};

// User profile type for UI components
export type UserProfile = User & {
  isFollowing?: boolean;
};

// 0G Storage content metadata interface
export interface ContentMetadata {
  type: 'post' | 'image' | 'video' | 'audio';
  userId?: string;
  timestamp?: number;
  originalName?: string;
  size?: number;
  mimeType?: string;
  retryAttempt?: boolean;
  originalAttempt?: number;
  backgroundRetry?: boolean;
  manualRetry?: boolean;
  walletAddress?: string;
}

// 0G Storage response interface
export interface ZGStorageResponse {
  success: boolean;
  hash?: string;
  transactionHash?: string;
  error?: string;
  retryable?: boolean;
  errorType?: string;
  rawError?: string;
}
